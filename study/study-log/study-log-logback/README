LogBack被分为3个组件， logback-core, logback-classic, logback-access
logback-classic实现了slf4j的所有api， 当想用slf4j的时候需要讲logback-classic引入到classpath中
logback-access是为了集成servlet环境准备， 提供HTTP-access日志接口

根节点<configuration>包含的属性
    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true.
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟.
    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。

    XML代码：
        <configuration scan="true" scanPeriod="60 second" debug="false">
              <!-- 其他配置省略-->
        </configuration>

根节点<configuration>的子节点
    LogBack的配置大概包括3部分：appender, logger和root。
    设置上下文名称<contextName>
    每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。

    XML代码：
    <configuration scan="true" scanPeriod="60 second" debug="false">
          <contextName>myAppName</contextName>
          <!-- 其他配置省略-->
    </configuration>

    设置变量 <property>
    用来定义变量值的标签，<property> 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。
    例如使用<property>定义上下文名称，然后在<contentName>设置logger上下文时使用。
    <configuration scan="true" scanPeriod="60 second" debug="false">
          <property name="APP_Name" value="myAppName" />
          <contextName>${APP_Name}</contextName>
          <!-- 其他配置省略-->
    </configuration>


    获取时间戳字符串 <timestamp>
    两个属性 key:标识此<timestamp> 的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循Java.txt.SimpleDateFormat的格式。
    例如将解析配置文件的时间作为上下文名称：
    <configuration scan="true" scanPeriod="60 second" debug="false">
          <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>
          <contextName>${bySecond}</contextName>
          <!-- 其他配置省略-->
    </configuration>

设置logger和root
    <logger>
    用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的additivity属性。

    name：用来指定受此logger约束的某一个包或者具体的某一个类。
    level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。
    如果未设置此属性，那么当前logger将会继承上级的级别。
    additivity：是否向上级logger传递打印信息。默认是true。
    <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。

    <root>
    也是<logger>元素，但是它是根logger。只有一个level属性，应为已经被命名为”root”.

    level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。
    <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。





